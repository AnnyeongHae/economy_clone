-- Autogenerated: do not edit this file
DROP DATABASE IF EXISTS economy;
CREATE DATABASE economy;
USE economy;

CREATE TABLE BATCH_JOB_INSTANCE  (
	JOB_INSTANCE_ID BIGINT  NOT NULL PRIMARY KEY ,
	VERSION BIGINT ,
	JOB_NAME VARCHAR(100) NOT NULL,
	JOB_KEY VARCHAR(32) NOT NULL,
	constraint JOB_INST_UN unique (JOB_NAME, JOB_KEY)
) ENGINE=InnoDB;

CREATE TABLE BATCH_JOB_EXECUTION  (
	JOB_EXECUTION_ID BIGINT  NOT NULL PRIMARY KEY ,
	VERSION BIGINT  ,
	JOB_INSTANCE_ID BIGINT NOT NULL,
	CREATE_TIME DATETIME(6) NOT NULL,
	START_TIME DATETIME(6) DEFAULT NULL ,
	END_TIME DATETIME(6) DEFAULT NULL ,
	STATUS VARCHAR(10) ,
	EXIT_CODE VARCHAR(2500) ,
	EXIT_MESSAGE VARCHAR(2500) ,
	LAST_UPDATED DATETIME(6),
	constraint JOB_INST_EXEC_FK foreign key (JOB_INSTANCE_ID)
	references BATCH_JOB_INSTANCE(JOB_INSTANCE_ID)
) ENGINE=InnoDB;

CREATE TABLE BATCH_JOB_EXECUTION_PARAMS  (
	JOB_EXECUTION_ID BIGINT NOT NULL ,
	PARAMETER_NAME VARCHAR(100) NOT NULL ,
	PARAMETER_TYPE VARCHAR(100) NOT NULL ,
	PARAMETER_VALUE VARCHAR(2500) ,
	IDENTIFYING CHAR(1) NOT NULL ,
	constraint JOB_EXEC_PARAMS_FK foreign key (JOB_EXECUTION_ID)
	references BATCH_JOB_EXECUTION(JOB_EXECUTION_ID)
) ENGINE=InnoDB;

CREATE TABLE BATCH_STEP_EXECUTION  (
	STEP_EXECUTION_ID BIGINT  NOT NULL PRIMARY KEY ,
	VERSION BIGINT NOT NULL,
	STEP_NAME VARCHAR(100) NOT NULL,
	JOB_EXECUTION_ID BIGINT NOT NULL,
	CREATE_TIME DATETIME(6) NOT NULL,
	START_TIME DATETIME(6) DEFAULT NULL ,
	END_TIME DATETIME(6) DEFAULT NULL ,
	STATUS VARCHAR(10) ,
	COMMIT_COUNT BIGINT ,
	READ_COUNT BIGINT ,
	FILTER_COUNT BIGINT ,
	WRITE_COUNT BIGINT ,
	READ_SKIP_COUNT BIGINT ,
	WRITE_SKIP_COUNT BIGINT ,
	PROCESS_SKIP_COUNT BIGINT ,
	ROLLBACK_COUNT BIGINT ,
	EXIT_CODE VARCHAR(2500) ,
	EXIT_MESSAGE VARCHAR(2500) ,
	LAST_UPDATED DATETIME(6),
	constraint JOB_EXEC_STEP_FK foreign key (JOB_EXECUTION_ID)
	references BATCH_JOB_EXECUTION(JOB_EXECUTION_ID)
) ENGINE=InnoDB;

CREATE TABLE BATCH_STEP_EXECUTION_CONTEXT  (
	STEP_EXECUTION_ID BIGINT NOT NULL PRIMARY KEY,
	SHORT_CONTEXT VARCHAR(2500) NOT NULL,
	SERIALIZED_CONTEXT TEXT ,
	constraint STEP_EXEC_CTX_FK foreign key (STEP_EXECUTION_ID)
	references BATCH_STEP_EXECUTION(STEP_EXECUTION_ID)
) ENGINE=InnoDB;

CREATE TABLE BATCH_JOB_EXECUTION_CONTEXT  (
	JOB_EXECUTION_ID BIGINT NOT NULL PRIMARY KEY,
	SHORT_CONTEXT VARCHAR(2500) NOT NULL,
	SERIALIZED_CONTEXT TEXT ,
	constraint JOB_EXEC_CTX_FK foreign key (JOB_EXECUTION_ID)
	references BATCH_JOB_EXECUTION(JOB_EXECUTION_ID)
) ENGINE=InnoDB;

CREATE TABLE BATCH_STEP_EXECUTION_SEQ (
	ID BIGINT NOT NULL,
	UNIQUE_KEY CHAR(1) NOT NULL,
	constraint UNIQUE_KEY_UN unique (UNIQUE_KEY)
) ENGINE=InnoDB;

INSERT INTO BATCH_STEP_EXECUTION_SEQ (ID, UNIQUE_KEY) select * from (select 0 as ID, '0' as UNIQUE_KEY) as tmp where not exists(select * from BATCH_STEP_EXECUTION_SEQ);

CREATE TABLE BATCH_JOB_EXECUTION_SEQ (
	ID BIGINT NOT NULL,
	UNIQUE_KEY CHAR(1) NOT NULL,
	constraint UNIQUE_KEY_UN unique (UNIQUE_KEY)
) ENGINE=InnoDB;

INSERT INTO BATCH_JOB_EXECUTION_SEQ (ID, UNIQUE_KEY) select * from (select 0 as ID, '0' as UNIQUE_KEY) as tmp where not exists(select * from BATCH_JOB_EXECUTION_SEQ);

CREATE TABLE BATCH_JOB_SEQ (
	ID BIGINT NOT NULL,
	UNIQUE_KEY CHAR(1) NOT NULL,
	constraint UNIQUE_KEY_UN unique (UNIQUE_KEY)
) ENGINE=InnoDB;

INSERT INTO BATCH_JOB_SEQ (ID, UNIQUE_KEY) select * from (select 0 as ID, '0' as UNIQUE_KEY) as tmp where not exists(select * from BATCH_JOB_SEQ);

# quiz 관련!
CREATE TABLE IF NOT EXISTS quiz (
                                    quiz_pk INTEGER NOT NULL AUTO_INCREMENT,
                                    quiz_title VARCHAR(50) NOT NULL,
                                    quiz_desc VARCHAR(255) NOT NULL,
                                    quiz_answer INTEGER NOT NULL,
                                    quiz_type ENUM('OX', 'MULTIPLE_CHOICE') NOT NULL,
                                    quest_no BIGINT,
                                    PRIMARY KEY (quiz_pk)
);

CREATE TABLE IF NOT EXISTS quiz_option (
                                           option_pk INTEGER NOT NULL AUTO_INCREMENT,
                                           quiz_pk INTEGER NOT NULL,
                                           option_id INTEGER NOT NULL,
                                           option_text VARCHAR(255) NOT NULL,
                                           is_correct BOOLEAN DEFAULT FALSE,
                                           PRIMARY KEY (option_pk)
);

CREATE TABLE IF NOT EXISTS daily_quiz (
                                          daily_quiz_id BIGINT AUTO_INCREMENT PRIMARY KEY,
                                          quiz_pk BIGINT NOT NULL,
                                          quiz_date_time DATETIME NOT NULL UNIQUE
);

CREATE TABLE IF NOT EXISTS quiz_submission_log (
                                                   log_id BIGINT NOT NULL AUTO_INCREMENT,
                                                   member_no BIGINT NOT NULL,
                                                   quiz_pk INTEGER NOT NULL,
                                                   is_correct BOOLEAN NOT NULL,
                                                   user_answer INTEGER,
                                                   submission_time TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
                                                   PRIMARY KEY (log_id)
);

INSERT INTO quiz (quiz_title, quiz_desc, quiz_answer, quiz_type)
VALUES
    ('환경 보호', '지구 온난화의 주요 원인은 무엇인가요?', 1, 'MULTIPLE_CHOICE'),
    ('재활용', '플라스틱을 재활용할 수 있는 방법은 무엇인가요?', 2, 'MULTIPLE_CHOICE'),
    ('탄소 배출', '탄소 발자국을 줄이기 위한 가장 좋은 방법은 자전거 이용이다.', 1, 'OX'),
    ('지구의 날', '매년 지구의 날은 언제인가요?', 3, 'MULTIPLE_CHOICE'),
    ('오존층', '오존층을 파괴하는 물질은 프레온 가스다.', 2, 'OX');


INSERT INTO quiz_option (quiz_pk, option_id, option_text, is_correct)
VALUES
-- 퀴즈 1: '환경 보호'
(1, 1, '온실가스', TRUE),
(1, 2, '산성비', FALSE),
(1, 3, '오존층 파괴', FALSE),
(1, 4, '태양 복사', FALSE),

-- 퀴즈 2: '재활용'
(2, 1, '분리배출', TRUE),
(2, 2, '소각', FALSE),
(2, 3, '매립', FALSE),
(2, 4, '압축', FALSE),

-- 퀴즈 3: '탄소 배출'
(3, 1, 'O', TRUE),
(3, 2, 'X', FALSE),

-- 퀴즈 4: '지구의 날'
(4, 1, '4월 22일', TRUE),
(4, 2, '5월 5일', FALSE),
(4, 3, '6월 1일', FALSE),
(4, 4, '12월 25일', FALSE),

-- 퀴즈 5: '오존층'
(5, 1, 'O', TRUE),
(5, 2, 'X', FALSE);

SELECT * FROM daily_quiz;
SELECT * FROM quiz;

# QR코드 관련
CREATE TABLE session (
                         session_id BIGINT AUTO_INCREMENT PRIMARY KEY,
                         session_key VARCHAR(255) NOT NULL,
                         expires_at DATETIME NOT NULL,
                         member_no BIGINT NOT NULL
);

# 여기 이후로 실행 --=> spring.jpa.hibernate.ddl-auto=update 형태로

INSERT INTO member (memberNo, memberEmail, memberGrade, memberName, memberPassword, memberPoint)
VALUES (1, "abc123@gmail.com", 1, "any", "abc123", 5 );

INSERT INTO member (memberNo, memberEmail, memberGrade, memberName, memberPassword, memberPoint)
VALUES (2, "abc1234@gmail.com", 2, "any", "abc1234", 5 );


SELECT * FRom session;
SELECT * FROM member;
SELECT * FROM MEMBER WHERE memberNo = 1;
SELECT * FROM quiz;
SELECT * FROM quiz_option;

DESC daily_quiz;
INSERT INTO daily_quiz (quiz_date_time, quiz_pk)
    VALUES( NOW(), 1);

SELECT * FROM daily_quiz;

# 샘플 데이터 다 실행된 이후, 다시 돌리기!!

SELECT * FROM quiz_option;
DESC quiz_submission_log;
SELECT * FROM quiz_submission_log;
